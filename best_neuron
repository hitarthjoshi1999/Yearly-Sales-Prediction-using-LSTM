{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.5"
    },
    "colab": {
      "name": "01-RNN-Time-Series-Example.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "7SqheHyQjynh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "00DQM8GgkHhl",
        "colab_type": "code",
        "outputId": "7b82ef11-5dc5-4892-8f5f-34e7ec5b1241",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-D5gzuygjynx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/FINAL-TF2-FILES/TF_2_Notebooks_and_Data/DATA/RSCCASN.csv',index_col='DATE',parse_dates=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AzjPKHR6jyn5",
        "colab_type": "code",
        "outputId": "22e4ab48-9b6a-47eb-924b-41a358d2eac9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        }
      },
      "source": [
        "df.info()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 334 entries, 1992-01-01 to 2019-10-01\n",
            "Data columns (total 1 columns):\n",
            " #   Column   Non-Null Count  Dtype\n",
            "---  ------   --------------  -----\n",
            " 0   RSCCASN  334 non-null    int64\n",
            "dtypes: int64(1)\n",
            "memory usage: 5.2 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HoV1jT2qjyoB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.columns = ['Sales']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uv2M1x4yjyoJ",
        "colab_type": "code",
        "outputId": "89a5d555-6cc8-4c29-b616-66f436a1389a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        }
      },
      "source": [
        "df.plot(figsize=(12,8))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc8fa2d8da0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o4B6mX2GjyoT",
        "colab_type": "code",
        "outputId": "99bde788-703d-4433-9b6e-acf0d75240d4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "len(df)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "334"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pryBWCsjjyoa",
        "colab_type": "code",
        "outputId": "44af080c-eee1-4e46-cbae-c0f067352809",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "len(df)- 18"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "316"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q1eLti0Pjyoe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_size = 12"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0-6YANU6jyok",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_ind = len(df)- test_size"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jrFU8Vicjyop",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train = df.iloc[:test_ind]\n",
        "test = df.iloc[test_ind:]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ThZ9ec-djyou",
        "colab_type": "code",
        "outputId": "3ea3158a-bf7e-4260-8677-53a269ad3471",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        }
      },
      "source": [
        "train"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DATE</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1992-01-01</th>\n",
              "      <td>6938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-02-01</th>\n",
              "      <td>7524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-03-01</th>\n",
              "      <td>8475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-04-01</th>\n",
              "      <td>9401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-05-01</th>\n",
              "      <td>9558</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-06-01</th>\n",
              "      <td>21589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-07-01</th>\n",
              "      <td>21919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-08-01</th>\n",
              "      <td>23381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-09-01</th>\n",
              "      <td>20260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-10-01</th>\n",
              "      <td>21473</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>322 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            Sales\n",
              "DATE             \n",
              "1992-01-01   6938\n",
              "1992-02-01   7524\n",
              "1992-03-01   8475\n",
              "1992-04-01   9401\n",
              "1992-05-01   9558\n",
              "...           ...\n",
              "2018-06-01  21589\n",
              "2018-07-01  21919\n",
              "2018-08-01  23381\n",
              "2018-09-01  20260\n",
              "2018-10-01  21473\n",
              "\n",
              "[322 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mst6ozoRjyoz",
        "colab_type": "code",
        "outputId": "6a993368-ef33-450b-cd4b-1c72b2e8c83c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        }
      },
      "source": [
        "test"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DATE</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-11-01</th>\n",
              "      <td>25831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-01</th>\n",
              "      <td>34706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>16410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>18134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>22093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>21597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>23200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>21123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>21714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-08-01</th>\n",
              "      <td>23791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-09-01</th>\n",
              "      <td>19695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-01</th>\n",
              "      <td>21113</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Sales\n",
              "DATE             \n",
              "2018-11-01  25831\n",
              "2018-12-01  34706\n",
              "2019-01-01  16410\n",
              "2019-02-01  18134\n",
              "2019-03-01  22093\n",
              "2019-04-01  21597\n",
              "2019-05-01  23200\n",
              "2019-06-01  21123\n",
              "2019-07-01  21714\n",
              "2019-08-01  23791\n",
              "2019-09-01  19695\n",
              "2019-10-01  21113"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EiCe63w3jyo7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TEqsbu2zjyo_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "scaler = MinMaxScaler()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cgaub47gjypD",
        "colab_type": "code",
        "outputId": "9564e43d-41d8-4424-a3d0-59923a9c7607",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# IGNORE WARNING ITS JUST CONVERTING TO FLOATS\n",
        "# WE ONLY FIT TO TRAININ DATA, OTHERWISE WE ARE CHEATING ASSUMING INFO ABOUT TEST SET\n",
        "scaler.fit(train)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinMaxScaler(copy=True, feature_range=(0, 1))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m7_XN9L0jypK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "scaled_train = scaler.transform(train)\n",
        "scaled_test = scaler.transform(test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rkxgPX_zjypP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b6rYKK7sjypS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Let's redefine to get 12 months back and then predict the next month out\n",
        "length = 12\n",
        "generator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EyIGY8PnjypV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# What does the first batch look like?\n",
        "X,y = generator[0]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HSsUhKMujypc",
        "colab_type": "code",
        "outputId": "28707d16-ec4a-4e2f-8ca0-d25bc40c8cf5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        }
      },
      "source": [
        "print(f'Given the Array: \\n{X.flatten()}')\n",
        "print(f'Predict this y: \\n {y}')"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Given the Array: \n",
            "[0.         0.02127505 0.05580163 0.08942056 0.09512053 0.08146965\n",
            " 0.07860151 0.12979233 0.09566512 0.1203892  0.15426227 0.41595266\n",
            " 0.02127505 0.05580163 0.08942056 0.09512053 0.08146965 0.07860151\n",
            " 0.12979233 0.09566512 0.1203892  0.15426227 0.41595266 0.02047633]\n",
            "Predict this y: \n",
            " [[0.02047633]\n",
            " [0.02127505]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rsrLcZpEjypj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import LSTM"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ANQPSxsDjypp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# We're only using one feature in our time series\n",
        "n_features = 1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udqaNmkMjyps",
        "colab_type": "code",
        "outputId": "2f198e5b-2eeb-4921-e139-48af51cf5e64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "# define model\n",
        "neuron_performance = []\n",
        "for n in range (1,251):\n",
        "  n_neurons = n\n",
        "  model = Sequential()\n",
        "  model.add(LSTM(n_neurons, activation='relu', input_shape=(length, n_features)))\n",
        "  model.add(Dense(1))\n",
        "  model.compile(optimizer='adam', loss='mse')\n",
        "  model.fit_generator(generator,epochs=6,\n",
        "                      validation_data=validation_generator,\n",
        "                      callbacks=early_stop)\n",
        "  test_predictions = []\n",
        "\n",
        "  first_eval_batch = scaled_train[-length:]\n",
        "  current_batch = first_eval_batch.reshape((1, length, n_features))\n",
        "\n",
        "  for i in range(len(test)):\n",
        "    \n",
        "      # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n",
        "      current_pred = model.predict(current_batch)[0]\n",
        "    \n",
        "      # store prediction\n",
        "      test_predictions.append(current_pred) \n",
        "    \n",
        "      # update batch to now include prediction and drop first value\n",
        "      current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n",
        "  true_predictions = scaler.inverse_transform(test_predictions)\n",
        "  try: \n",
        "    test = test.drop('Predictions',axis=1)\n",
        "    test['Predictions'] = true_predictions\n",
        "  except:\n",
        "    test['Predictions'] = true_predictions\n",
        "  performance = np.sqrt(mean_squared_error(test[\"Sales\"],test[\"Predictions\"]))\n",
        "  neuron_performance.append(performance)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-29-7fb9bb02279c>:10: Model.fit_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use Model.fit, which supports generators.\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0418 - val_loss: 0.0141\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0268 - val_loss: 0.0063\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0249 - val_loss: 0.0035\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0240 - val_loss: 0.0042\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0233 - val_loss: 0.0025\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0227 - val_loss: 0.0028\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.1175 - val_loss: 0.1521\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 4ms/step - loss: 0.0636 - val_loss: 0.0878\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0450 - val_loss: 0.0589\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0384 - val_loss: 0.0435\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0363 - val_loss: 0.0365\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0358 - val_loss: 0.0346\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.2549 - val_loss: 0.2810\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0940 - val_loss: 0.1373\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0556 - val_loss: 0.0807\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0427 - val_loss: 0.0545\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0381 - val_loss: 0.0429\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 4ms/step - loss: 0.0365 - val_loss: 0.0363\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0503 - val_loss: 0.0067\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0216 - val_loss: 6.6375e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0208 - val_loss: 9.6030e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0200 - val_loss: 2.0888e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 8.7798e-04\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 1.8845e-06\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.1150 - val_loss: 0.1507\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0641 - val_loss: 0.0896\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0449 - val_loss: 0.0592\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0384 - val_loss: 0.0438\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0363 - val_loss: 0.0365\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0357 - val_loss: 0.0318\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.1131 - val_loss: 0.1510\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0650 - val_loss: 0.0907\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0456 - val_loss: 0.0604\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0386 - val_loss: 0.0450\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0364 - val_loss: 0.0375\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0358 - val_loss: 0.0331\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0681 - val_loss: 0.0033\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0201 - val_loss: 8.5318e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0189 - val_loss: 1.5593e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0185 - val_loss: 1.8741e-07\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 0.0012\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0177 - val_loss: 7.7147e-05\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0829 - val_loss: 0.0320\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0236 - val_loss: 5.8265e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0211 - val_loss: 5.2593e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 1.3668e-05\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0194 - val_loss: 8.1164e-04\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0188 - val_loss: 7.5769e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0235 - val_loss: 0.0022\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0185 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0186 - val_loss: 9.8826e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 0.0011\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0177 - val_loss: 1.9713e-04\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0170 - val_loss: 0.0073\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0660 - val_loss: 0.0160\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0235 - val_loss: 6.9172e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0204 - val_loss: 4.7176e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 0.0012\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0198 - val_loss: 0.0014\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0644 - val_loss: 0.0059\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0208 - val_loss: 0.0019\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0191 - val_loss: 2.6115e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0187 - val_loss: 7.6226e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0186 - val_loss: 1.3557e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0517 - val_loss: 9.5397e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 4.4844e-07\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 0.0067\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0187 - val_loss: 6.8682e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0348 - val_loss: 1.0472e-06\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0204 - val_loss: 0.0047\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 0.0022\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0376 - val_loss: 0.0063\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0203 - val_loss: 8.2991e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 6.6130e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 1.9203e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 5.9437e-04\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0199 - val_loss: 3.8162e-05\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0614 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0200 - val_loss: 0.0017\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 0.0133\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0272 - val_loss: 0.0013\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0202 - val_loss: 0.0057\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0198 - val_loss: 8.3956e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0192 - val_loss: 2.8744e-05\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0188 - val_loss: 0.0023\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 0.0034\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0557 - val_loss: 1.5425e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0211 - val_loss: 1.3689e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 0.0024\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0464 - val_loss: 0.0010\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 5.5619e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 7.1071e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0186 - val_loss: 8.8187e-05\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0515 - val_loss: 0.0010\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0214 - val_loss: 1.8386e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 0.0030\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 0.0011\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0414 - val_loss: 3.7821e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0207 - val_loss: 0.0030\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 4.6102e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0485 - val_loss: 0.0021\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 3.2512e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 5.9776e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0173 - val_loss: 0.0014\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0170 - val_loss: 0.0011\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0370 - val_loss: 5.9988e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 8.1540e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0186 - val_loss: 0.0029\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0482 - val_loss: 0.0041\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0199 - val_loss: 0.0026\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0191 - val_loss: 1.3450e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0189 - val_loss: 0.0033\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0181 - val_loss: 1.4834e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0461 - val_loss: 0.0035\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0202 - val_loss: 4.1356e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0178 - val_loss: 0.0019\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0179 - val_loss: 0.0390\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0275 - val_loss: 2.9114e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0185 - val_loss: 4.8383e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0185 - val_loss: 4.4509e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 0.0058\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0537 - val_loss: 0.0078\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0204 - val_loss: 1.4579e-07\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 0.0012\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0181 - val_loss: 2.0545e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0360 - val_loss: 0.0064\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 1.4316e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0183 - val_loss: 1.4660e-05\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0174 - val_loss: 3.2154e-06\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0177 - val_loss: 7.8492e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0286 - val_loss: 1.9956e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 5.2517e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0188 - val_loss: 0.0048\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0481 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0202 - val_loss: 4.0914e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 8.6756e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0181 - val_loss: 0.0148\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0437 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0211 - val_loss: 8.6944e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0186 - val_loss: 0.0020\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0188 - val_loss: 0.0055\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0443 - val_loss: 0.0059\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 4.4328e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0185 - val_loss: 0.0016\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0179 - val_loss: 0.0021\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0447 - val_loss: 1.3660e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0198 - val_loss: 0.0043\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0194 - val_loss: 0.0047\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0297 - val_loss: 1.3884e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0192 - val_loss: 8.9131e-06\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0020\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0175 - val_loss: 4.6552e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0283 - val_loss: 4.4329e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 0.0113\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0209 - val_loss: 0.0015\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0224 - val_loss: 6.3692e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0207 - val_loss: 0.0011\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0189 - val_loss: 0.0041\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0378 - val_loss: 7.3490e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 0.0056\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0191 - val_loss: 0.0023\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0318 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0258\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0195 - val_loss: 0.0061\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0439 - val_loss: 6.5208e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 0.0010\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 7.0681e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0314 - val_loss: 0.0011\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0187 - val_loss: 3.8040e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0182 - val_loss: 2.5207e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0163 - val_loss: 0.0018\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0139 - val_loss: 0.0509\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0275 - val_loss: 5.3555e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0199 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0193 - val_loss: 8.3514e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0188 - val_loss: 0.0011\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0189 - val_loss: 0.0029\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0329 - val_loss: 0.0034\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 0.0159\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 0.0062\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0326 - val_loss: 0.0018\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0198 - val_loss: 0.0026\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 3.5874e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0179 - val_loss: 0.0176\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0173 - val_loss: 0.0110\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0402 - val_loss: 9.5602e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0196 - val_loss: 0.0137\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0190 - val_loss: 9.5804e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0170 - val_loss: 6.2501e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0132 - val_loss: 0.0761\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0325 - val_loss: 7.0653e-06\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0137\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 0.0088\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 10ms/step - loss: 0.0354 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0222 - val_loss: 0.0093\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0181 - val_loss: 7.6812e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0176 - val_loss: 2.0464e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0164 - val_loss: 0.0133\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0358 - val_loss: 0.0062\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0197 - val_loss: 3.8552e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 5.4575e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0177 - val_loss: 0.0077\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0409 - val_loss: 0.0041\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0188 - val_loss: 0.0061\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0179 - val_loss: 8.1883e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0157 - val_loss: 0.0054\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0138 - val_loss: 0.0259\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0294 - val_loss: 0.0131\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 5ms/step - loss: 0.0198 - val_loss: 1.1357e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0188 - val_loss: 5.5508e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 1.6536e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0183 - val_loss: 0.0209\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0373 - val_loss: 1.5495e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0182 - val_loss: 0.0110\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 0.0034\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0290 - val_loss: 4.5320e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0196 - val_loss: 0.0025\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0029\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0341 - val_loss: 2.1978e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0200 - val_loss: 0.0094\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0204 - val_loss: 0.0040\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0316 - val_loss: 0.0042\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0196 - val_loss: 2.1867e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0190 - val_loss: 0.0012\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 5.2907e-06\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0126 - val_loss: 0.0292\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0088 - val_loss: 0.1163\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0379 - val_loss: 1.7606e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0204 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0198 - val_loss: 0.0023\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0288 - val_loss: 0.0015\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0200 - val_loss: 0.0066\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0197 - val_loss: 4.3204e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 7.8621e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0022\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0348 - val_loss: 0.0048\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0190 - val_loss: 1.6686e-06\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0038\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0161 - val_loss: 0.0188\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0254 - val_loss: 3.3256e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0197 - val_loss: 0.0012\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 0.0017\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0333 - val_loss: 2.6713e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0203 - val_loss: 1.0339e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0193 - val_loss: 1.8399e-06\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 6.6411e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 8.6660e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0337 - val_loss: 0.0171\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0198 - val_loss: 6.4520e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0182 - val_loss: 5.6984e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0169 - val_loss: 0.0062\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0158 - val_loss: 0.0372\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0334 - val_loss: 0.0018\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0206 - val_loss: 0.0035\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0180 - val_loss: 2.2095e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0154 - val_loss: 0.0093\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0107 - val_loss: 0.0435\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0269 - val_loss: 1.1787e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0194 - val_loss: 0.0038\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0179 - val_loss: 0.0011\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0330 - val_loss: 0.0063\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0033\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0175 - val_loss: 0.0431\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0143 - val_loss: 0.0600\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0411 - val_loss: 6.8507e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0189 - val_loss: 5.6871e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0164 - val_loss: 0.0139\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0118 - val_loss: 0.0403\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0252 - val_loss: 8.6223e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0191 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0171 - val_loss: 4.1077e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0133 - val_loss: 0.0562\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0069 - val_loss: 0.0410\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0312 - val_loss: 2.4485e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 0.0029\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0021\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0343 - val_loss: 0.0090\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0196 - val_loss: 6.5881e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0194 - val_loss: 0.0043\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0163 - val_loss: 0.0557\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0311 - val_loss: 6.1653e-06\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0197 - val_loss: 0.0084\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 0.0034\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0306 - val_loss: 0.0035\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0189 - val_loss: 0.0141\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0194 - val_loss: 0.0147\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0402 - val_loss: 4.3436e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0200 - val_loss: 0.0343\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0178 - val_loss: 2.1154e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0148 - val_loss: 0.0023\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0114 - val_loss: 0.0245\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0303 - val_loss: 0.0025\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0193 - val_loss: 0.0042\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0184 - val_loss: 9.9313e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0175 - val_loss: 5.4758e-05\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0159 - val_loss: 0.0330\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0091 - val_loss: 0.2333\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0327 - val_loss: 0.0015\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0206 - val_loss: 8.0878e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0181 - val_loss: 0.0038\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0176 - val_loss: 0.0030\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0304 - val_loss: 0.0308\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0202 - val_loss: 0.0024\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0190 - val_loss: 0.0027\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0169 - val_loss: 1.3692e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0142 - val_loss: 0.0083\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0093 - val_loss: 0.0142\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0272 - val_loss: 0.0024\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0022\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0181 - val_loss: 0.0109\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0151 - val_loss: 0.0247\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0278 - val_loss: 0.0137\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0178 - val_loss: 1.7474e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0166 - val_loss: 0.0068\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0134 - val_loss: 0.0459\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0330 - val_loss: 9.2475e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0202 - val_loss: 0.0040\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 1.4962e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0176 - val_loss: 1.8067e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0140 - val_loss: 0.0049\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0278 - val_loss: 0.0026\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0191 - val_loss: 2.4208e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0187 - val_loss: 0.0090\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0184 - val_loss: 0.0148\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0306 - val_loss: 1.6103e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0206 - val_loss: 7.5208e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0196 - val_loss: 0.0031\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0338 - val_loss: 1.4959e-08\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 0.0014\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0169 - val_loss: 0.0025\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0284 - val_loss: 0.0045\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0205 - val_loss: 1.5981e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 1.2712e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0177 - val_loss: 4.5478e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0351 - val_loss: 0.0038\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 7.8864e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0193 - val_loss: 9.0992e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0156 - val_loss: 0.0219\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0306 - val_loss: 0.0062\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0202 - val_loss: 5.5000e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0193 - val_loss: 0.0144\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0163 - val_loss: 7.4838e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0300 - val_loss: 3.3289e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0195 - val_loss: 1.9425e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0193 - val_loss: 0.0023\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0290 - val_loss: 0.0030\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0191 - val_loss: 8.1436e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 0.0040\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0121 - val_loss: 0.0168\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0311 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0182 - val_loss: 0.0042\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0162 - val_loss: 7.6611e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0140 - val_loss: 0.0105\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0084 - val_loss: 0.0350\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0328 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0196 - val_loss: 0.0045\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0177 - val_loss: 0.0083\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0333 - val_loss: 0.0022\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0306\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0188 - val_loss: 0.0034\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0368 - val_loss: 0.0034\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0197 - val_loss: 3.4935e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0169 - val_loss: 0.0043\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0126 - val_loss: 0.0457\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0312 - val_loss: 0.0118\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0184 - val_loss: 2.0703e-08\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0158 - val_loss: 0.0162\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0094 - val_loss: 0.0360\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0396 - val_loss: 2.8824e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0186 - val_loss: 0.0014\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0178 - val_loss: 8.6376e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0281 - val_loss: 5.2845e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0197 - val_loss: 0.0012\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0183 - val_loss: 0.0029\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0331 - val_loss: 0.0034\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0183 - val_loss: 0.1079\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0166 - val_loss: 0.0056\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0319 - val_loss: 0.0062\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0185 - val_loss: 0.0167\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0151 - val_loss: 0.0248\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0294 - val_loss: 0.0064\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0187 - val_loss: 9.2982e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0170 - val_loss: 0.0115\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 6ms/step - loss: 0.0129 - val_loss: 0.0254\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0272 - val_loss: 0.0014\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0191 - val_loss: 0.0063\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0198 - val_loss: 0.0093\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0276 - val_loss: 2.5592e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0202 - val_loss: 0.0011\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0179 - val_loss: 6.6418e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0305 - val_loss: 2.3727e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0206 - val_loss: 0.0031\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0177 - val_loss: 0.0165\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0336 - val_loss: 0.0081\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0198 - val_loss: 2.9831e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0164 - val_loss: 0.0266\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0127 - val_loss: 0.0424\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0239 - val_loss: 0.0041\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0192 - val_loss: 0.0032\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0191 - val_loss: 0.0039\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0146 - val_loss: 0.0245\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0296 - val_loss: 8.2953e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0206 - val_loss: 6.6124e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0167 - val_loss: 3.8797e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0142 - val_loss: 0.0013\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0094 - val_loss: 0.1216\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0316 - val_loss: 5.6022e-08\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0178 - val_loss: 6.8815e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0168 - val_loss: 0.0081\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0263 - val_loss: 0.0304\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0207 - val_loss: 5.9256e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0186 - val_loss: 0.0020\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0172 - val_loss: 0.0110\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0266 - val_loss: 0.0030\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0185 - val_loss: 4.0254e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0120 - val_loss: 0.0251\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0060 - val_loss: 0.0317\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0271 - val_loss: 1.2396e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0193 - val_loss: 0.0035\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0182 - val_loss: 7.3349e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0291 - val_loss: 0.0205\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0200 - val_loss: 0.0063\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0186 - val_loss: 0.0026\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0132 - val_loss: 0.0736\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0063 - val_loss: 0.0299\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0327 - val_loss: 0.0215\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0194 - val_loss: 1.3331e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0184 - val_loss: 0.0032\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0137 - val_loss: 0.0631\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0388 - val_loss: 0.0083\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0196 - val_loss: 0.0043\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0177 - val_loss: 0.0078\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0153 - val_loss: 0.0491\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0325 - val_loss: 0.0133\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0186 - val_loss: 3.7602e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0182 - val_loss: 2.5289e-07\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0135 - val_loss: 0.0883\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0103 - val_loss: 0.0788\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0367 - val_loss: 0.0027\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0187 - val_loss: 2.1298e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0155 - val_loss: 0.0085\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0116 - val_loss: 0.0332\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0273 - val_loss: 0.0024\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0171 - val_loss: 0.0065\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0142 - val_loss: 0.0793\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0290 - val_loss: 0.0018\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0189 - val_loss: 0.0066\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0141 - val_loss: 0.0234\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0288 - val_loss: 0.0031\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0183 - val_loss: 0.0092\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0194 - val_loss: 0.0067\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0262 - val_loss: 0.0054\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0186 - val_loss: 5.2966e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0161 - val_loss: 0.0030\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0125 - val_loss: 0.0924\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0254 - val_loss: 0.0042\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0188 - val_loss: 9.1051e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0131 - val_loss: 0.0940\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0072 - val_loss: 0.0660\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0276 - val_loss: 1.4539e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0202 - val_loss: 5.4632e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0164 - val_loss: 0.0067\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0263 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0179 - val_loss: 0.0122\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0201 - val_loss: 7.8870e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0139 - val_loss: 0.0414\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0120 - val_loss: 0.0967\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0256 - val_loss: 4.0783e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0188 - val_loss: 0.0082\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0139 - val_loss: 0.0127\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0237 - val_loss: 1.1910e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0192 - val_loss: 0.0010\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 7ms/step - loss: 0.0150 - val_loss: 0.0324\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0245 - val_loss: 0.0018\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0178 - val_loss: 0.0502\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0172 - val_loss: 0.0196\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0238 - val_loss: 0.0086\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0201 - val_loss: 2.2919e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0138 - val_loss: 0.2167\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0117 - val_loss: 0.0181\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0292 - val_loss: 0.0180\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0183 - val_loss: 0.0026\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0136 - val_loss: 0.0225\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0154 - val_loss: 2.5335e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0073 - val_loss: 0.0500\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0033 - val_loss: 0.0391\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0274 - val_loss: 0.0237\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0204 - val_loss: 0.0134\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0127 - val_loss: 0.0086\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0080 - val_loss: 0.0130\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0062 - val_loss: 0.0391\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0331 - val_loss: 3.9232e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0197 - val_loss: 3.1331e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0174 - val_loss: 0.0085\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0111 - val_loss: 0.0722\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0281 - val_loss: 0.0253\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0190 - val_loss: 0.0015\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0166 - val_loss: 0.0151\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0098 - val_loss: 0.0584\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0288 - val_loss: 0.0028\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0192 - val_loss: 8.9185e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0162 - val_loss: 0.0552\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0111 - val_loss: 0.0479\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0239 - val_loss: 0.0044\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0180 - val_loss: 2.1331e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0123 - val_loss: 0.0209\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0108 - val_loss: 0.0266\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0286 - val_loss: 7.1145e-08\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0198 - val_loss: 0.0061\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0176 - val_loss: 0.0145\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0272 - val_loss: 3.6109e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0190 - val_loss: 7.0873e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0165 - val_loss: 0.0311\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0279 - val_loss: 0.0067\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0178 - val_loss: 0.0482\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0162 - val_loss: 0.0038\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0106 - val_loss: 0.0394\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0054 - val_loss: 0.0027\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0033 - val_loss: 0.0849\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0291 - val_loss: 0.0018\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0188 - val_loss: 0.0042\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0163 - val_loss: 0.0106\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0297 - val_loss: 0.0145\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0198 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0153 - val_loss: 0.0018\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0097 - val_loss: 0.0339\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0280 - val_loss: 5.6329e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0174 - val_loss: 0.0027\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0148 - val_loss: 0.0745\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 10ms/step - loss: 0.0262 - val_loss: 1.0298e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0188 - val_loss: 0.0167\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0149 - val_loss: 0.0663\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0297 - val_loss: 9.5320e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0192 - val_loss: 2.6286e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0148 - val_loss: 0.0441\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0118 - val_loss: 0.0675\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0267 - val_loss: 0.0154\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0212 - val_loss: 1.2188e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0167 - val_loss: 0.0481\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0112 - val_loss: 0.0449\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0271 - val_loss: 0.0158\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0194 - val_loss: 0.0245\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0124 - val_loss: 0.0453\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 10ms/step - loss: 0.0303 - val_loss: 0.0083\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0193 - val_loss: 0.0028\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0178 - val_loss: 8.9999e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0111 - val_loss: 0.1303\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0053 - val_loss: 0.0398\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0316 - val_loss: 0.0055\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0185 - val_loss: 5.4170e-06\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0167 - val_loss: 0.0266\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 8ms/step - loss: 0.0087 - val_loss: 0.0705\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 10ms/step - loss: 0.0253 - val_loss: 0.0017\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0194 - val_loss: 0.0116\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0165 - val_loss: 0.0995\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0272 - val_loss: 0.0066\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0197 - val_loss: 0.0154\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0157 - val_loss: 0.0436\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0263 - val_loss: 0.0115\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0205 - val_loss: 2.0120e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0167 - val_loss: 0.0110\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0110 - val_loss: 0.0781\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0242 - val_loss: 1.3827e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0189 - val_loss: 0.0039\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0162 - val_loss: 0.0871\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0268 - val_loss: 0.0192\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0189 - val_loss: 0.0014\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0141 - val_loss: 0.0071\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0071 - val_loss: 0.0179\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0297 - val_loss: 3.1341e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0195 - val_loss: 0.0059\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0143 - val_loss: 0.0108\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0287 - val_loss: 0.0120\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0228 - val_loss: 0.0015\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0160 - val_loss: 0.1726\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0128 - val_loss: 0.0286\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0246 - val_loss: 0.0047\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0196 - val_loss: 0.0167\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0134 - val_loss: 0.0354\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0281 - val_loss: 5.6771e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0172 - val_loss: 0.0087\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0175 - val_loss: 0.0066\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0277 - val_loss: 0.0058\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0191 - val_loss: 1.1345e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0150 - val_loss: 0.0898\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0091 - val_loss: 0.0545\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0368 - val_loss: 7.0274e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0197 - val_loss: 0.0073\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0177 - val_loss: 0.0042\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0314 - val_loss: 3.5687e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0163 - val_loss: 0.0035\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0132 - val_loss: 0.0368\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0269 - val_loss: 3.8013e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0159 - val_loss: 0.0011\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0169 - val_loss: 0.0085\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0290 - val_loss: 5.1018e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0201 - val_loss: 0.0101\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0173 - val_loss: 6.6577e-05\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0263 - val_loss: 0.0010\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 10ms/step - loss: 0.0178 - val_loss: 0.0015\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0144 - val_loss: 0.0128\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0246 - val_loss: 5.1771e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0167 - val_loss: 1.7819e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0102 - val_loss: 0.0065\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0073 - val_loss: 0.0305\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0291 - val_loss: 0.0206\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0182 - val_loss: 0.0048\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0133 - val_loss: 0.1113\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0061 - val_loss: 0.0565\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0250 - val_loss: 0.0147\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 1s 9ms/step - loss: 0.0192 - val_loss: 0.0276\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0105 - val_loss: 0.0584\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0294 - val_loss: 0.0025\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0200 - val_loss: 0.0070\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0178 - val_loss: 3.0812e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0118 - val_loss: 0.0451\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0064 - val_loss: 0.0839\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0277 - val_loss: 4.9939e-07\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0178 - val_loss: 0.0101\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0146 - val_loss: 0.0330\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0284 - val_loss: 0.0028\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0180 - val_loss: 0.0126\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0151 - val_loss: 0.1427\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0283 - val_loss: 0.0079\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0186 - val_loss: 0.0023\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0166 - val_loss: 0.1121\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0083 - val_loss: 0.1058\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0263 - val_loss: 0.0020\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0206 - val_loss: 0.0114\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0157 - val_loss: 0.0094\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0271 - val_loss: 9.2460e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0179 - val_loss: 1.7586e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0093 - val_loss: 0.0449\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0045 - val_loss: 0.0354\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0313 - val_loss: 6.0317e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0209 - val_loss: 0.0080\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0142 - val_loss: 0.0271\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0248 - val_loss: 1.2707e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0197 - val_loss: 0.0017\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0149 - val_loss: 0.0541\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0259 - val_loss: 0.0067\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0171 - val_loss: 0.0280\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0143 - val_loss: 0.1001\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0299 - val_loss: 0.0029\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 10ms/step - loss: 0.0177 - val_loss: 0.0200\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0142 - val_loss: 0.0163\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0270 - val_loss: 0.0015\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0195 - val_loss: 0.0038\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0174 - val_loss: 0.0336\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0313 - val_loss: 0.0024\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0180 - val_loss: 0.0999\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0175 - val_loss: 0.0069\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0284 - val_loss: 0.0136\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0172 - val_loss: 0.0363\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0086 - val_loss: 0.1414\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0286 - val_loss: 0.0145\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0195 - val_loss: 0.0017\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0133 - val_loss: 0.0049\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0070 - val_loss: 0.0172\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0279 - val_loss: 0.0204\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0171 - val_loss: 0.0351\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0135 - val_loss: 0.0307\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0264 - val_loss: 0.0070\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0168 - val_loss: 0.0404\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0100 - val_loss: 0.1079\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0265 - val_loss: 2.0600e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0179 - val_loss: 0.0205\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0104 - val_loss: 0.0119\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0276 - val_loss: 3.0057e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0190 - val_loss: 0.0047\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0117 - val_loss: 0.0733\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0258 - val_loss: 6.8518e-06\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0165 - val_loss: 0.0079\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0139 - val_loss: 5.2376e-04\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0263 - val_loss: 0.0017\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0191 - val_loss: 0.0118\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0151 - val_loss: 0.0134\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0280 - val_loss: 2.8386e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0195 - val_loss: 0.0112\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0118 - val_loss: 0.1005\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0261 - val_loss: 0.0013\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0220 - val_loss: 0.0272\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0122 - val_loss: 0.0299\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0301 - val_loss: 4.5035e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0178 - val_loss: 0.0082\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0162 - val_loss: 0.0040\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0280 - val_loss: 0.0075\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0191 - val_loss: 0.0396\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0131 - val_loss: 0.2071\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0246 - val_loss: 5.4865e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0180 - val_loss: 0.0139\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0102 - val_loss: 0.0447\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0261 - val_loss: 0.0026\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0198 - val_loss: 0.0016\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0137 - val_loss: 0.0359\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0057 - val_loss: 5.3176e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0079 - val_loss: 0.0217\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 2s 11ms/step - loss: 0.0031 - val_loss: 0.0227\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0270 - val_loss: 0.0027\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0177 - val_loss: 0.0420\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0121 - val_loss: 0.0235\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0243 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0172 - val_loss: 0.0485\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0090 - val_loss: 2.2127e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0084 - val_loss: 0.0120\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0030 - val_loss: 0.0277\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0294 - val_loss: 0.0077\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0196 - val_loss: 1.2682e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0135 - val_loss: 0.1166\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0049 - val_loss: 0.0386\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0249 - val_loss: 0.0122\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0193 - val_loss: 0.0367\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0138 - val_loss: 0.0077\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0093 - val_loss: 0.0141\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0049 - val_loss: 0.0096\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0284 - val_loss: 6.2082e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0172 - val_loss: 0.0429\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0111 - val_loss: 0.2842\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0294 - val_loss: 1.1186e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0198 - val_loss: 2.4540e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0163 - val_loss: 0.0034\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0105 - val_loss: 0.0742\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0291 - val_loss: 0.0012\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0185 - val_loss: 0.0089\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0125 - val_loss: 0.0340\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0282 - val_loss: 0.0049\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0177 - val_loss: 0.0065\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0128 - val_loss: 0.0718\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0270 - val_loss: 0.0024\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0190 - val_loss: 0.0434\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0141 - val_loss: 0.0358\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0262 - val_loss: 0.0105\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0188 - val_loss: 0.0024\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0131 - val_loss: 0.0066\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0060 - val_loss: 0.0184\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0278 - val_loss: 6.7774e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0182 - val_loss: 0.0025\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0133 - val_loss: 0.0019\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0247 - val_loss: 0.0401\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0179 - val_loss: 0.0230\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0112 - val_loss: 0.0125\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0062 - val_loss: 0.0036\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0030 - val_loss: 0.0432\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0032 - val_loss: 0.0371\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0314 - val_loss: 0.0321\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0210 - val_loss: 9.3556e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0145 - val_loss: 0.0119\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0100 - val_loss: 0.0878\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0258 - val_loss: 0.0080\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0171 - val_loss: 0.0188\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0129 - val_loss: 0.0304\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0271 - val_loss: 5.5397e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0190 - val_loss: 0.0072\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0126 - val_loss: 0.0106\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0279 - val_loss: 0.0408\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0204 - val_loss: 0.0358\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0128 - val_loss: 0.0094\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0059 - val_loss: 0.0277\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0062 - val_loss: 0.0371\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0285 - val_loss: 6.5800e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0176 - val_loss: 0.0073\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0121 - val_loss: 0.0220\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0266 - val_loss: 0.0040\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0186 - val_loss: 0.0074\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0122 - val_loss: 0.0458\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 21ms/step - loss: 0.0281 - val_loss: 0.0029\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 22ms/step - loss: 0.0191 - val_loss: 2.3386e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 4s 23ms/step - loss: 0.0135 - val_loss: 0.0508\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0091 - val_loss: 0.0528\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0254 - val_loss: 0.0064\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0153 - val_loss: 0.1015\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0087 - val_loss: 0.0264\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0268 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0189 - val_loss: 0.0149\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0116 - val_loss: 0.0810\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0273 - val_loss: 0.0033\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0184 - val_loss: 0.0023\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0113 - val_loss: 0.0561\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0051 - val_loss: 0.0170\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0272 - val_loss: 4.3852e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0169 - val_loss: 0.0107\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0105 - val_loss: 0.0481\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0297 - val_loss: 0.0050\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0182 - val_loss: 0.0079\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0140 - val_loss: 0.0810\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0272 - val_loss: 3.5593e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0193 - val_loss: 0.0313\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0118 - val_loss: 0.1776\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0263 - val_loss: 0.0025\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0181 - val_loss: 7.3224e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0107 - val_loss: 0.0234\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0044 - val_loss: 0.0567\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0245 - val_loss: 8.8568e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0184 - val_loss: 0.0034\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0087 - val_loss: 0.0092\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0247 - val_loss: 0.0212\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0201 - val_loss: 0.0109\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0147 - val_loss: 0.0940\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0088 - val_loss: 0.0198\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0291 - val_loss: 0.0069\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0183 - val_loss: 0.0138\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0107 - val_loss: 0.0621\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0254 - val_loss: 0.0013\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0165 - val_loss: 0.0350\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0143 - val_loss: 0.0368\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0240 - val_loss: 3.4141e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0188 - val_loss: 9.6245e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0130 - val_loss: 0.0752\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0251 - val_loss: 0.0014\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0175 - val_loss: 0.0395\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0100 - val_loss: 0.0539\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0290 - val_loss: 5.6786e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0209 - val_loss: 0.0061\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0126 - val_loss: 0.0909\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0269 - val_loss: 3.3538e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0176 - val_loss: 0.0096\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0105 - val_loss: 0.0734\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0222 - val_loss: 6.6985e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0182 - val_loss: 0.1058\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0096 - val_loss: 0.0181\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0268 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0171 - val_loss: 0.0041\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0082 - val_loss: 0.0684\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0248 - val_loss: 0.0054\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0183 - val_loss: 0.0014\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0097 - val_loss: 0.1712\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0055 - val_loss: 0.0326\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0227 - val_loss: 3.8256e-07\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0166 - val_loss: 0.0196\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0100 - val_loss: 0.0305\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0264 - val_loss: 0.0152\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0203 - val_loss: 5.0154e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0152 - val_loss: 0.1965\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0076 - val_loss: 0.0229\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0248 - val_loss: 0.0015\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0183 - val_loss: 0.0015\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0103 - val_loss: 0.0697\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 4s 26ms/step - loss: 0.0261 - val_loss: 0.0076\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0151 - val_loss: 0.2193\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0138 - val_loss: 0.0040\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0050 - val_loss: 0.0499\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0021 - val_loss: 0.0403\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0293 - val_loss: 3.5663e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0174 - val_loss: 0.0075\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0097 - val_loss: 0.0501\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0229 - val_loss: 6.9807e-06\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0164 - val_loss: 0.0666\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0091 - val_loss: 0.0361\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0251 - val_loss: 0.0020\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0216 - val_loss: 0.1656\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0099 - val_loss: 0.0068\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0256 - val_loss: 0.0126\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0153 - val_loss: 0.0298\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0114 - val_loss: 0.0012\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0048 - val_loss: 0.0172\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0075 - val_loss: 0.0393\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0275 - val_loss: 0.0057\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0172 - val_loss: 1.7304e-05\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0108 - val_loss: 0.1176\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0061 - val_loss: 0.0681\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0221 - val_loss: 3.8447e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0159 - val_loss: 0.0230\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0085 - val_loss: 0.0214\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0315 - val_loss: 0.0016\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0196 - val_loss: 0.0048\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0139 - val_loss: 0.1031\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0223 - val_loss: 0.0041\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0170 - val_loss: 0.0872\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0081 - val_loss: 0.0335\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0282 - val_loss: 3.3453e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0159 - val_loss: 0.0266\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0110 - val_loss: 0.0116\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0252 - val_loss: 0.0049\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0170 - val_loss: 7.4681e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0089 - val_loss: 0.0205\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0078 - val_loss: 3.4336e-04\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0038 - val_loss: 0.0843\n",
            "Epoch 6/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0031 - val_loss: 0.0331\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0293 - val_loss: 2.5463e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0199 - val_loss: 0.0265\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0184 - val_loss: 0.0320\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0246 - val_loss: 0.0013\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0167 - val_loss: 0.0121\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0089 - val_loss: 0.0285\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0257 - val_loss: 0.0035\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0146 - val_loss: 0.0440\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 4s 25ms/step - loss: 0.0081 - val_loss: 0.0226\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0260 - val_loss: 5.8516e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0148 - val_loss: 0.0381\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0057 - val_loss: 0.0228\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0276 - val_loss: 0.0015\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0211 - val_loss: 0.0165\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0113 - val_loss: 0.1362\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0258 - val_loss: 0.0014\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0168 - val_loss: 0.0614\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0105 - val_loss: 0.0942\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0256 - val_loss: 0.0053\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0165 - val_loss: 0.0396\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0121 - val_loss: 0.1099\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0239 - val_loss: 0.0342\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0165 - val_loss: 0.0342\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0118 - val_loss: 0.0062\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0060 - val_loss: 0.0085\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0027 - val_loss: 0.0440\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0298 - val_loss: 0.0010\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0152 - val_loss: 0.0585\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0099 - val_loss: 1.9128e-04\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0051 - val_loss: 0.0322\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0031 - val_loss: 0.0502\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0262 - val_loss: 1.4097e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0208 - val_loss: 0.0173\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0153 - val_loss: 0.0757\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0279 - val_loss: 8.3500e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0207 - val_loss: 0.0303\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0120 - val_loss: 0.0800\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0260 - val_loss: 0.0045\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0170 - val_loss: 0.0020\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0083 - val_loss: 0.0824\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0042 - val_loss: 0.0280\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0277 - val_loss: 0.0258\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0179 - val_loss: 0.0021\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0093 - val_loss: 0.0024\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0063 - val_loss: 0.0154\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0279 - val_loss: 0.0052\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0184 - val_loss: 0.0013\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0096 - val_loss: 0.0399\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0051 - val_loss: 0.0368\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0230 - val_loss: 0.0170\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0144 - val_loss: 0.0047\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0081 - val_loss: 1.4963e-05\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0049 - val_loss: 0.0613\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0056 - val_loss: 0.0173\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0262 - val_loss: 9.1185e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0168 - val_loss: 0.0209\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0088 - val_loss: 0.0594\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 20ms/step - loss: 0.0273 - val_loss: 0.0025\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0180 - val_loss: 7.0234e-04\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0111 - val_loss: 0.0452\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0059 - val_loss: 0.0685\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 20ms/step - loss: 0.0241 - val_loss: 0.0069\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0168 - val_loss: 0.0195\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0091 - val_loss: 0.0510\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0245 - val_loss: 0.0053\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0163 - val_loss: 0.1047\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0113 - val_loss: 0.0012\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0050 - val_loss: 0.0197\n",
            "Epoch 5/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0032 - val_loss: 0.0077\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LTPOZXa0ebDu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = pd.DataFrame(neuron_performance)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HglBUBZrpHDG",
        "colab_type": "code",
        "outputId": "00b03650-4d04-454b-e574-2143e2aa370e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        }
      },
      "source": [
        "nn.plot(figsize=(20,8))"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc8904b84a8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "biH4dHxvQgfu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn.columns=['prediction']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8LD_fCtUQnzK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "5bbbc949-7012-42b6-ac86-731aad44690c"
      },
      "source": [
        "nn"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5677.177884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7809.122109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7843.621662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4351.775593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7637.303753</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>1122.297914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2941.039129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>4155.896702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>2047.146492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>1848.601107</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>250 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      prediction\n",
              "0    5677.177884\n",
              "1    7809.122109\n",
              "2    7843.621662\n",
              "3    4351.775593\n",
              "4    7637.303753\n",
              "..           ...\n",
              "245  1122.297914\n",
              "246  2941.039129\n",
              "247  4155.896702\n",
              "248  2047.146492\n",
              "249  1848.601107\n",
              "\n",
              "[250 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SWgmQZ_dP_2E",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = nn.sort_values('prediction')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dL6XLi8eQ3dh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = nn.head(5)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1ms_kgi9Q_8m",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "neuron_number = nn['prediction'].index.values.astype('int')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WkxgPdKeS7hY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "3c93d4c1-9934-4617-85d2-4ead1bbfdc6e"
      },
      "source": [
        "# define model\n",
        "neuron_performance = []\n",
        "for n in neuron_number:\n",
        "  n_neurons = n\n",
        "  model = Sequential()\n",
        "  model.add(LSTM(n_neurons, activation='relu', input_shape=(length, n_features)))\n",
        "  model.add(Dense(1))\n",
        "  model.compile(optimizer='adam', loss='mse')\n",
        "  model.fit_generator(generator,epochs=6,\n",
        "                      validation_data=validation_generator,\n",
        "                      callbacks=early_stop)\n",
        "  test_predictions = []\n",
        "\n",
        "  first_eval_batch = scaled_train[-length:]\n",
        "  current_batch = first_eval_batch.reshape((1, length, n_features))\n",
        "\n",
        "  for i in range(len(test)):\n",
        "    \n",
        "      # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n",
        "      current_pred = model.predict(current_batch)[0]\n",
        "    \n",
        "      # store prediction\n",
        "      test_predictions.append(current_pred) \n",
        "    \n",
        "      # update batch to now include prediction and drop first value\n",
        "      current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n",
        "  true_predictions = scaler.inverse_transform(test_predictions)\n",
        "  try: \n",
        "    test = test.drop('Predictions',axis=1)\n",
        "    test['Predictions'] = true_predictions\n",
        "  except:\n",
        "    test['Predictions'] = true_predictions\n",
        "  performance = np.sqrt(mean_squared_error(test[\"Sales\"],test[\"Predictions\"]))\n",
        "  neuron_performance.append(performance)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0258 - val_loss: 0.0057\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0167 - val_loss: 0.0448\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 12ms/step - loss: 0.0094 - val_loss: 0.0113\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 19ms/step - loss: 0.0266 - val_loss: 0.0041\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0201 - val_loss: 0.0034\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0096 - val_loss: 0.0091\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0054 - val_loss: 0.0524\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 3s 18ms/step - loss: 0.0268 - val_loss: 1.1752e-04\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 3s 16ms/step - loss: 0.0183 - val_loss: 0.0025\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 3s 17ms/step - loss: 0.0139 - val_loss: 0.0980\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 14ms/step - loss: 0.0279 - val_loss: 2.5395e-05\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0206 - val_loss: 0.0028\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 13ms/step - loss: 0.0148 - val_loss: 0.0537\n",
            "Epoch 1/6\n",
            "155/155 [==============================] - 2s 16ms/step - loss: 0.0252 - val_loss: 0.0118\n",
            "Epoch 2/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0191 - val_loss: 0.0117\n",
            "Epoch 3/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0108 - val_loss: 0.2357\n",
            "Epoch 4/6\n",
            "155/155 [==============================] - 2s 15ms/step - loss: 0.0063 - val_loss: 0.0359\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IKQAnJV_TRyC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = pd.DataFrame(neuron_performance)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i4WcsSEDTU3T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = nn.sort_values('prediction')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XbwiYCntUBfS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "nn = nn.head(1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IYe7gisRUFdD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_neuron = nn.index.values.astype(int)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vcw9sdk9UOpr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "final= neuron_number[best_neuron]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PWkT2cd-jypv",
        "colab_type": "code",
        "outputId": "7dc185a5-7fa8-4af5-d0ee-e5a83b330e18",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        }
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_256\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "lstm_256 (LSTM)              (None, 216)               188352    \n",
            "_________________________________________________________________\n",
            "dense_256 (Dense)            (None, 1)                 217       \n",
            "=================================================================\n",
            "Total params: 188,569\n",
            "Trainable params: 188,569\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EpWWyFj_jypz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.callbacks import EarlyStopping"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zKaHclmbjyp4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "early_stop = EarlyStopping(monitor='val_loss',patience=3)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OFhNNDwujyp7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "validation_generator = TimeseriesGenerator(scaled_test,scaled_test, length=length-1, batch_size=2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MQ_yh3iHjyp-",
        "colab_type": "code",
        "outputId": "0265a4c4-6d26-4215-d9c4-671137ad2ef0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        }
      },
      "source": [
        "# fit model\n",
        "model = Sequential()\n",
        "model.add(LSTM(final[0], activation='relu', input_shape=(length, n_features)))\n",
        "model.add(Dense(1))\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "model.fit_generator(generator,epochs=6,\n",
        "                    validation_data=validation_generator,\n",
        "                   callbacks=[early_stop])"
      ],
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "161/161 [==============================] - 3s 17ms/step - loss: 0.0248 - val_loss: 2.9802e-04\n",
            "Epoch 2/6\n",
            "161/161 [==============================] - 3s 16ms/step - loss: 0.0139 - val_loss: 0.0333\n",
            "Epoch 3/6\n",
            "161/161 [==============================] - 3s 16ms/step - loss: 0.0079 - val_loss: 0.0074\n",
            "Epoch 4/6\n",
            "161/161 [==============================] - 3s 16ms/step - loss: 0.0057 - val_loss: 0.0172\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fc890733518>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7q5o00zKjyqB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "losses = pd.DataFrame(model.history.history)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "4JlLVY28jyqE",
        "colab_type": "code",
        "outputId": "a1753ca5-9c23-46aa-a15d-b0287bec3431",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "source": [
        "losses.plot()"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc88cd62550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 159
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DAWZrn5QjyqJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "n_input = 12"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eqK4kzPCjyqN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "first_eval_batch = scaled_train[-length:]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XQWKGhBSjyqP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "first_eval_batch = first_eval_batch.reshape((1, n_input, n_features))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-UcJZQkHjyqT",
        "colab_type": "code",
        "outputId": "e3c4453c-e0a0-4acb-b4de-93737b3fdf7f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "model.predict(first_eval_batch)"
      ],
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.6299131]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9bpJbGvZjyqX",
        "colab_type": "code",
        "outputId": "e519d92c-e87a-4795-ec39-8de35b3bdbb9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "scaled_test[0]"
      ],
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.68592071])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k1mvvpXjjyqc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "test_predictions = []\n",
        "\n",
        "first_eval_batch = scaled_train[-length:]\n",
        "current_batch = first_eval_batch.reshape((1, length, n_features))\n",
        "\n",
        "for i in range(len(test)):\n",
        "    \n",
        "    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n",
        "    current_pred = model.predict(current_batch)[0]\n",
        "    \n",
        "    # store prediction\n",
        "    test_predictions.append(current_pred) \n",
        "    \n",
        "    # update batch to now include prediction and drop first value\n",
        "    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tn6rN1hhjyqe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "true_predictions = scaler.inverse_transform(test_predictions)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sFbjI_S4jyqh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# IGNORE WARNINGS\n",
        "test['Predictions'] = true_predictions"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WrZUp3Phjyqk",
        "colab_type": "code",
        "outputId": "ec08e98d-8bf5-4a36-a181-2c832294a97b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        }
      },
      "source": [
        "test"
      ],
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "      <th>Predictions</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DATE</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-11-01</th>\n",
              "      <td>25831</td>\n",
              "      <td>24288.326197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-01</th>\n",
              "      <td>34706</td>\n",
              "      <td>34534.801974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>16410</td>\n",
              "      <td>16716.012991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>18134</td>\n",
              "      <td>18319.902101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>22093</td>\n",
              "      <td>21344.582474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>21597</td>\n",
              "      <td>19790.016469</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>23200</td>\n",
              "      <td>22542.191733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>21123</td>\n",
              "      <td>20594.166305</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>21714</td>\n",
              "      <td>20859.573306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-08-01</th>\n",
              "      <td>23791</td>\n",
              "      <td>22167.575500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-09-01</th>\n",
              "      <td>19695</td>\n",
              "      <td>19541.216593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-01</th>\n",
              "      <td>21113</td>\n",
              "      <td>20527.394677</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Sales   Predictions\n",
              "DATE                           \n",
              "2018-11-01  25831  24288.326197\n",
              "2018-12-01  34706  34534.801974\n",
              "2019-01-01  16410  16716.012991\n",
              "2019-02-01  18134  18319.902101\n",
              "2019-03-01  22093  21344.582474\n",
              "2019-04-01  21597  19790.016469\n",
              "2019-05-01  23200  22542.191733\n",
              "2019-06-01  21123  20594.166305\n",
              "2019-07-01  21714  20859.573306\n",
              "2019-08-01  23791  22167.575500\n",
              "2019-09-01  19695  19541.216593\n",
              "2019-10-01  21113  20527.394677"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cdBPYsPFjyqo",
        "colab_type": "code",
        "outputId": "e5ff8ad2-0399-485b-a32d-f7744a112421",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        }
      },
      "source": [
        "test.plot(figsize=(12,8))"
      ],
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc88c623438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 169
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EUiCbRh8EORN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.metrics import mean_squared_error"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FqJlzXGpEfXE",
        "colab_type": "code",
        "outputId": "5c405ea1-7d16-4266-bc08-0e463429c1aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "np.sqrt(mean_squared_error(test[\"Sales\"],test[\"Predictions\"]))"
      ],
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "948.9988080598255"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9lfD-6oUjyqt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "full_scaler = MinMaxScaler()\n",
        "scaled_full_data = full_scaler.fit_transform(df)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XFTVmXpAjyqw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "length = 12 # Length of the output sequences (in number of timesteps)\n",
        "generator = TimeseriesGenerator(scaled_full_data, scaled_full_data, length=length, batch_size=2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "te-I1iZfjyqy",
        "colab_type": "code",
        "outputId": "0f418acc-26f9-45ef-9934-c2d2e77144fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        }
      },
      "source": [
        "model = Sequential()\n",
        "model.add(LSTM(150, activation='relu', input_shape=(length, n_features)))\n",
        "model.add(Dense(1))\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "\n",
        "# fit model\n",
        "model.fit_generator(generator,epochs=8)"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0318\n",
            "Epoch 2/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0202\n",
            "Epoch 3/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0164\n",
            "Epoch 4/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0094\n",
            "Epoch 5/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0064\n",
            "Epoch 6/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0024\n",
            "Epoch 7/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0016\n",
            "Epoch 8/8\n",
            "161/161 [==============================] - 1s 9ms/step - loss: 0.0016\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fc88d4c8e10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vqiTalXAjyq2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "forecast = []\n",
        "# Replace periods with whatever forecast length you want\n",
        "periods = 12\n",
        "\n",
        "first_eval_batch = scaled_full_data[-length:]\n",
        "current_batch = first_eval_batch.reshape((1, length, n_features))\n",
        "\n",
        "for i in range(periods):\n",
        "    \n",
        "    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n",
        "    current_pred = model.predict(current_batch)[0]\n",
        "    \n",
        "    # store prediction\n",
        "    forecast.append(current_pred) \n",
        "    \n",
        "    # update batch to now include prediction and drop first value\n",
        "    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fqAwkZ2zjyq5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "forecast = scaler.inverse_transform(forecast)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MaI_aJjCjyq9",
        "colab_type": "code",
        "outputId": "c99bf44c-4781-4fe5-d498-c99645e37ef2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DATE</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1992-01-01</th>\n",
              "      <td>6938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-02-01</th>\n",
              "      <td>7524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-03-01</th>\n",
              "      <td>8475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-04-01</th>\n",
              "      <td>9401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992-05-01</th>\n",
              "      <td>9558</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>21123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>21714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-08-01</th>\n",
              "      <td>23791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-09-01</th>\n",
              "      <td>19695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-01</th>\n",
              "      <td>21113</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>334 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            Sales\n",
              "DATE             \n",
              "1992-01-01   6938\n",
              "1992-02-01   7524\n",
              "1992-03-01   8475\n",
              "1992-04-01   9401\n",
              "1992-05-01   9558\n",
              "...           ...\n",
              "2019-06-01  21123\n",
              "2019-07-01  21714\n",
              "2019-08-01  23791\n",
              "2019-09-01  19695\n",
              "2019-10-01  21113\n",
              "\n",
              "[334 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "biRxEYWrjyrE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "forecast_index = pd.date_range(start='2019-11-01',periods=periods,freq='MS')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FVnBUO3XjyrI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "forecast_df = pd.DataFrame(data=forecast,index=forecast_index,\n",
        "                           columns=['Forecast'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uoe_PsjWjyrL",
        "colab_type": "code",
        "outputId": "34b2aaf9-1537-4671-93e6-f0c404f6dd4a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        }
      },
      "source": [
        "forecast_df"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Forecast</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-11-01</th>\n",
              "      <td>26640.151612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-12-01</th>\n",
              "      <td>37967.324324</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-01</th>\n",
              "      <td>17341.641358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-02-01</th>\n",
              "      <td>18652.262964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-03-01</th>\n",
              "      <td>22419.135978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-01</th>\n",
              "      <td>21933.713089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-05-01</th>\n",
              "      <td>23584.913340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-06-01</th>\n",
              "      <td>21573.476947</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-07-01</th>\n",
              "      <td>22189.269588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-08-01</th>\n",
              "      <td>24299.486815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-09-01</th>\n",
              "      <td>20528.765539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-10-01</th>\n",
              "      <td>21951.197731</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Forecast\n",
              "2019-11-01  26640.151612\n",
              "2019-12-01  37967.324324\n",
              "2020-01-01  17341.641358\n",
              "2020-02-01  18652.262964\n",
              "2020-03-01  22419.135978\n",
              "2020-04-01  21933.713089\n",
              "2020-05-01  23584.913340\n",
              "2020-06-01  21573.476947\n",
              "2020-07-01  22189.269588\n",
              "2020-08-01  24299.486815\n",
              "2020-09-01  20528.765539\n",
              "2020-10-01  21951.197731"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8-4nE4A8jyrN",
        "colab_type": "code",
        "outputId": "93a12bce-fbe4-4496-bb58-cb5913ebbf41",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        }
      },
      "source": [
        "df.plot()\n",
        "forecast_df.plot()"
      ],
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc8883e24e0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 154
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ua-p7NdBjyrQ",
        "colab_type": "code",
        "outputId": "50ee7954-b212-451d-f4f6-77cd053aa892",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "ax = df.plot()\n",
        "forecast_df.plot(ax=ax)"
      ],
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc888366ef0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 155
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BrFOM5u0jyrT",
        "colab_type": "code",
        "outputId": "94aeebb4-2468-4f90-eb72-21589a9376f0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        }
      },
      "source": [
        "ax = df.plot()\n",
        "forecast_df.plot(ax=ax)\n",
        "plt.xlim('2018-01-01','2020-12-01')"
      ],
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(576.0, 611.0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 156
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
